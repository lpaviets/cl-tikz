* Intro

This project tries to make it easier to produce images that can be embedded in LaTeX documents. In particular, this projects acts as a Lisp wrapper around TikZ.
As TikZ's syntax is sometimes obtuse, and as computations done directly with the TeX engine are either hard to do (due to TikZ's syntax, LaTeX limitations ...), or really, we try to do most of the work in a more powerful programming language, and we directly generate "low-level" TikZ. As such, the TikZ code that is output does not contain computationally-intensive macros, and we try to do as much maths as possible (rotations, loops ...) in Common Lisp beforehand.

As most of personal research work involves tilings, Wang tiles, subshifts and several other combinatoric objects such as cellular automata or substitutions, a major part of the project is directed towards this objective, /e.g./ making it easy to define Wang tiles and how to draw them. This also involves writing algorithms that are not directly related to the task of producing TikZ code. I try to separate the "drawing" and the "computing" part whenever this makes sense, but it is not always possible.

*REMARK:* this project is still heavily WIP. This means that no stable API exists yet, and everything is subject to change. Nevertheless, I still think it might be useful, if only as some proof-of-concept.

* Design choices

This library provides several functions, macros and utilities that should facilitate the production of TikZ code. They mainly work by using the ~format~ function, outputing to ~*standard-output*~ - writing in files is then achieved by capturing this stream and redirecting it to the desired file. Below are listed some of the main goals and design principles followed in the library:

- The TikZ code that is produced has to be readable. This means that I try to add line breaks, spaces, give explicit node names ... whenever it is possible.
- Do as much work as possible in Common Lisp. For example, "unroll" loops (do the loop directly in Lisp, and output TikZ code that does not contain any loop), place nodes and points directly (rather than using positional arguments such as TikZ's ~below left=of A~, etc)
-  ... but don't reinvent the wheel. For example, computing the edges endpoints between drawn nodes would be expensive, and require heavy computations (is the node drawn as a circle ? As a rectangle ? Are there arguments specified for the style of the edge ? What is the ~inner sep~ of the node ?), so we let TikZ do it.

* Examples
** Robinson tiling
Example of the famous Robinson tiling:

This is part of the code used to define the tileset, which includes indications on how to draw the individual tiles, their adjacency rules and so on (not shown here)
#+begin_src lisp
  (defvar *robinson*
    (let ((robinson-tiles (make-hash-table :test 'eq)))
      (dolist (tile (list (make-robinson-tile 'robinson t t
                                              '(:green :center :out)
                                              '(:red :left :out)
                                              '(:red :up :out)
                                              '(:green :center :out))
                          (make-robinson-tile 'robinson t nil
                                              '(:green :center :out)
                                              '(:red :left :out)
                                              '(:red :up :out)
                                              '(:green :center :out))
                          ;; more tiles
                          (make-robinson-tile 'robinson nil nil
                                              '(:red :up :in)
                                              '(:red :right :in)
                                              '(:red :up :in)
                                              '(:red :right :out))))
        (dotimes (turns 4)
          (setf (gethash (make-rotated-tile tile turns) robinson-tiles) t)))
      (make-tileset 'robinson robinson-tiles)))
#+end_src

If we try to use this tileset to tile a 10-by-10 grid with one of the included solvers, we get the following LaTeX code:

#+begin_src LaTeX :export t
  %%% CODE AUTO GENERATED BY THE CL-TIKZ PACKAGE

  \documentclass{standalone}
  \usepackage{tikz}
  \usepackage[utf8]{inputenc}
  \usepackage{pgfmath}
  \usetikzlibrary{arrows, shapes, decorations.markings, decorations.pathmorphing}

  \begin{document}
  \begin{tikzpicture}
  \draw[] (-0.50, -0.50) rectangle (0.50, 0.50);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, green] (0.00, 0.00) -- (0.00, 0.50);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, red] (0.00, -0.25) -- (-0.50, -0.25);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, green] (0.00, 0.00) -- (0.00, -0.50);
  \draw[decoration={markings, mark=at position 0.98 with {\arrow{latex}}}, postaction={decorate}, red] (0.00, -0.25) -- (0.50, -0.25);
  \draw[] (0.50, -0.50) rectangle (1.50, 0.50);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, red] (1.25, 0.00) -- (1.25, 0.50);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, red] (1.00, -0.25) -- (0.50, -0.25);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, red] (1.25, 0.00) -- (1.25, -0.50);
  \draw[decoration={markings, mark=at position 0.98 with {\arrow{latex}}}, postaction={decorate}, red] (1.00, -0.25) -- (1.50, -0.25);
  [...]
  \draw[] (7.50, 8.50) rectangle (8.50, 9.50);
  \draw[fill=yellow] (7.50, 8.50) rectangle (7.55, 8.55);
  \draw[fill=yellow] (7.50, 9.45) rectangle (7.55, 9.50);
  \draw[fill=yellow] (8.45, 8.50) rectangle (8.50, 8.55);
  \draw[fill=yellow] (8.45, 9.45) rectangle (8.50, 9.50);
  \draw[decoration={markings, mark=at position 0.98 with {\arrow{latex}}}, postaction={decorate}, red] (8.25, 8.75) -- (8.25, 9.50);
  \draw[decoration={markings, mark=at position 0.98 with {\arrow{latex}}}, postaction={decorate}, red] (8.25, 8.75) -- (7.50, 8.75);
  \draw[decoration={markings, mark=at position 0.98 with {\arrow{latex}}}, postaction={decorate}, green] (8.00, 9.00) -- (8.00, 8.50);
  \draw[decoration={markings, mark=at position 0.98 with {\arrow{latex}}}, postaction={decorate}, green] (8.00, 9.00) -- (8.50, 9.00);
  \draw[] (8.50, 8.50) rectangle (9.50, 9.50);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, red] (9.25, 9.00) -- (9.25, 9.50);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, green] (9.00, 9.00) -- (8.50, 9.00);
  \draw[decoration={markings, mark=at position 0.98 with {\arrow{latex}}}, postaction={decorate}, red] (9.25, 9.00) -- (9.25, 8.50);
  \draw[decoration={markings, mark=at position 0.7 with {\arrowreversed{latex}}}, postaction={decorate}, green] (9.00, 9.00) -- (9.50, 9.00);
  \end{tikzpicture}
  \end{document}
#+end_src

which produces, when compiled, the following image:

#+CAPTION: Robinson tiling
[[file:examples/robinson.png]]

** Substitutions
Another classic example of an object that is painful to draw using TikZ but easy to compute with a more powerful language is /substitutions/.

*** Graph substitution
We can define and draw purely combinatoric self-similar objects, such as graphs. A famous example is the [[https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle][SierpiÅ„ski triangle]]:

#+begin_src lisp
  (defparameter *sierpinski* (def-graph-substitution
                               :vertices
                               (a 0 0)
                               (b 1 0)
                               (c 1 1)
                               :edges
                               (a b hori)
                               (b c vert)
                               (a c diag)
                               :substitution
                               (hori (b a hori))
                               (vert (c b vert))
                               (diag (c a diag))
                               :colours
                               (hori blue)
                               (vert red)
                               (diag green)))
#+end_src

The corresponding LaTeX code generated by a call to ~draw-substitution~ is

#+begin_src latex
  %%% CODE AUTO GENERATED BY THE CL-TIKZ PACKAGE

  \documentclass{standalone}
  \usepackage[svgnames]{xcolor}
  \usepackage{tikz}
  \usepackage[utf8]{inputenc}
  \usepackage{pgfmath}
  \usetikzlibrary{arrows, shapes, decorations.markings, decorations.pathmorphing}
  \begin{document}[]
  \begin{tikzpicture}[]
    \node[draw, circle, inner sep=2pt] (C_15_15) at (15.00, 15.00) {};
    \node[draw, circle, inner sep=2pt] (B_15_14) at (15.00, 14.00) {};
    \node[draw, circle, inner sep=2pt] (A_14_14) at (14.00, 14.00) {};
    \node[draw, circle, inner sep=2pt] (C_15_13) at (15.00, 13.00) {};
    \node[draw, circle, inner sep=2pt] (B_15_12) at (15.00, 12.00) {};
    \node[draw, circle, inner sep=2pt] (A_14_12) at (14.00, 12.00) {};
    \node[draw, circle, inner sep=2pt] (C_13_13) at (13.00, 13.00) {};
    \node[draw, circle, inner sep=2pt] (B_13_12) at (13.00, 12.00) {};
    \node[draw, circle, inner sep=2pt] (A_12_12) at (12.00, 12.00) {};
    % more stuff [...]
    \path[->](B_11_0) edge[blue] (A_12_0);
    \path[->](C_3_3) edge[green] (A_4_4);
    \path[->](C_7_3) edge[red] (B_7_4);
    \path[->](B_3_0) edge[blue] (A_4_0);
    \path[->](C_7_7) edge[green] (A_8_8);
    \path[->](C_15_7) edge[red] (B_15_8);
    \path[->](B_7_0) edge[blue] (A_8_0);
  \end{tikzpicture}
  \end{document}
#+end_src

which in turns produces, when compiled, this image

#+CAPTION: Sierpinski Triangle
[[file:examples/sierpinski.png]]

*** Geometric substitutions

Finally, an example of polygon substitution, with the famous example of the Chair:

#+begin_src lisp
  (defparameter *chair*
    (def-geometric-subdivision
      :initial
      (0 0)
      (2 0)
      (2 1)
      (1 1)
      (1 2)
      (0 2)
      :factor
      2 2
      :subdivision
      ((0 0) 0)
      ((1 1) 0)
      ((0 4) (- (/ pi 2)))
      ((4 0) (/ pi 2))))
#+end_src

Vertices are supplied via their coordinates, and the subdivision is given as a coordinate + a rotation angle.

The LaTeX code looks like this:

#+begin_src latex
  %%% CODE AUTO GENERATED BY THE CL-TIKZ PACKAGE

  \documentclass{standalone}
  \usepackage[svgnames]{xcolor}
  \usepackage{tikz}
  \usepackage[utf8]{inputenc}
  \usepackage{pgfmath}
  \usetikzlibrary{arrows, shapes, decorations.markings, decorations.pathmorphing}
  \begin{document}[]
  \begin{tikzpicture}[]
    \draw[](0.00, 0.00) -- (2.00, 0.00) -- (2.00, 1.00) -- (1.00, 1.00) -- (1.00, 2.00) -- (0.00, 2.00) -- cycle;
    \draw[](1.00, 1.00) -- (3.00, 1.00) -- (3.00, 2.00) -- (2.00, 2.00) -- (2.00, 3.00) -- (1.00, 3.00) -- cycle;
    \draw[](0.00, 4.00) -- (0.00, 2.00) -- (1.00, 2.00) -- (1.00, 3.00) -- (2.00, 3.00) -- (2.00, 4.00) -- cycle;
    % [...]
    \draw[](28.00, 16.00) -- (26.00, 16.00) -- (26.00, 15.00) -- (27.00, 15.00) -- (27.00, 14.00) -- (28.00, 14.00) -- cycle;
    \draw[](24.00, 12.00) -- (26.00, 12.00) -- (26.00, 13.00) -- (25.00, 13.00) -- (25.00, 14.00) -- (24.00, 14.00) -- cycle;
  \end{tikzpicture}
  \end{document}
#+end_src

and the output file is the following image

[[file:examples/chair.png]]

* How to use

* Todo
- Link the tiling implementation and the Dancing Links implementation, to use it as a solver.
#+begin_src lisp
;; See https://github.com/seblabbe/slabbe/blob/d8340eeb5fdccffc6c28ab6c3b0e6d68177bb676/slabbe/wang_tiles.py#L2902
;; for a Python implementation of the same idea,
;; as well as https://github.com/seblabbe/slabbe/blob/d8340eeb5fdccffc6c28ab6c3b0e6d68177bb676/slabbe/wang_tiles.py#L2679

;; View the problem as a set of constraints
;; - Each cell of the grid must contain one, and exactly one, tile
;; - No two adjacent cells can contain "invalid" patterns
#+end_src

- More efficient solvers in general
- Cellular automata
- Generic SFTs (not only Wang tiles/radius-1 rules)
- Substitutions
