* Intro

This project tries to make it easier to produce images that can be embedded in LaTeX documents. In particular, this projects acts as a Lisp wrapper around TikZ.
As TikZ's syntax is sometimes obtuse, and as computations done directly with the TeX engine are either hard to do (due to TikZ's syntax, LaTeX limitations ...), or really, we try to do most of the work in a more powerful programming language, and we directly generate "low-level" TikZ. As such, the TikZ code that is output does not contain computationally-intensive macros, and we try to do as much maths as possible (rotations, loops ...) in Common Lisp beforehand.

As most of personal research work involves tilings, Wang tiles, subshifts and several other combinatoric objects such as cellular automata or substitutions, a major part of the project is directed towards this objective, /e.g./ making it is easy to define Wang tiles and how to draw them. This also involves writing algorithms that are not directly related to the task of producing TikZ code. I try to separate the "drawing" and the "computing" part whenever this makes sense, but it is not always possible.

* Todo
- Link the tiling implementation and the Dancing Links implementation, to use it as a solver.
#+begin_src lisp
;; See https://github.com/seblabbe/slabbe/blob/d8340eeb5fdccffc6c28ab6c3b0e6d68177bb676/slabbe/wang_tiles.py#L2902
;; for a Python implementation of the same idea,
;; as well as https://github.com/seblabbe/slabbe/blob/d8340eeb5fdccffc6c28ab6c3b0e6d68177bb676/slabbe/wang_tiles.py#L2679

;; View the problem as a set of constraints
;; - Each cell of the grid must contain one, and exactly one, tile
;; - No two adjacent cells can contain "invalid" patterns
#+end_src

- More efficient solvers in general
- Cellular automata
- Generic SFTs (not only Wang tiles/radius-1 rules)
- Substitutions
